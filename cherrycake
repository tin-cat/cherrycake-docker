#!/bin/bash
# Cherrycake docker tool

APP_NAME="cherrycake-app"

DOCKER_NGINX=$APP_NAME-nginx
DOCKER_PHP=$APP_NAME-php
DOCKER_MARIADB=$APP_NAME-mariadb
DOCKER_CRON=$APP_NAME-cron
DOCKER_DB=$APP_NAME-mariadb
DOCKER_REDIS=$APP_NAME-redis

COLOR_WHITE="\033[1m"
COLOR_RED="\033[31m"
COLOR_GREEN="\033[32m"
COLOR_YELLOW="\033[33m"
COLOR_BLUE="\033[34m"
COLOR_RED_LIGHT="\033[35m"
COLOR_BLUE_LIGHT="\033[36m"
COLOR_BG_RED="\033[41m"
COLOR_BG_GREEN="\033[42m"
COLOR_BG_YELLOW="\033[43m"
COLOR_BG_BLUE="\033[44m"
COLOR_RESET="\033[0m"

COLOR_A=$COLOR_RED_LIGHT
COLOR_B=$COLOR_RED_LIGHT
COLOR_C=$COLOR_BLUE_LIGHT
COLOR_COMMAND=$COLOR_BLUE
COLOR_ERROR=$COLOR_RED
COLOR_WARNING=$COLOR_YELLOW
COLOR_INFO=$COLOR_BLUE

commands=(
	help
	-
	start
	stop
	down
	restart
	status
	-
	nginx-build
	nginx-log
	nginx-ssh
	nginx-restart
	-
	php-build
	php-log
	php-ssh
	php-restart
	-
	cron-ssh
	cron-restart
	-
	db-build
	db-log
	db-ssh
	db-restart
	-
	install-skeleton
	setup-config
	composer-update
	install-base-database
	setup-nginx
	engine-developer-mode
	app-developer-mode
	generate-janitor-key
	-
	cli
	janitor
	redis-flush-all
)

VARIABLES_DIR='variables'

function header {
	echo -e $COLOR_A'üßÅ Cherrycake '$COLOR_C'docker'$COLOR_RESET
}

function syntax {
	echo -e 'syntax: cherrycake '$COLOR_BLUE'command'$COLOR_RESET' [value]\n'
}

function listCommands {
	for command in ${commands[*]}; do

		if [ $command == '-' ]; then
			r=$r'-----\n'
			continue
		fi

		r=$r$COLOR_COMMAND$command$COLOR_RESET#
		case "$command" in
			"help") r=$r"Shows this help message";;
			"start") r=$r"Start the containers";;
			"stop") r=$r"Stop the containers";;
			"down") r=$r"Remove the containers";;
			"restart") r=$r"Restart the containers";;
			"status") r=$r"Information about the containers";;
			"nginx-build") r=$r"Build the Nginx container";;
			"nginx-log") r=$r"Tail the Nginx log";;
			"nginx-ssh") r=$r"SSH into the Nginx container";;
			"nginx-restart") r=$r"Restarts the Nginx container";;
			"php-build") r=$r"Build the PHP container";;
			"php-log") r=$r"Tail the PHP log";;
			"php-ssh") r=$r"SSH into the PHP container";;
			"php-restart") r=$r"Restarts the PHP container";;
			"cron-ssh") r=$r"SSH into the Cron container";;
			"cron-restart") r=$r"Restarts the Cron container";;
			"db-build") r=$r"Build the Database container";;
			"db-log") r=$r"Tail the Database container log";;
			"db-ssh") r=$r"SSH into the Database container";;
			"db-restart") r=$r"Restarts the Database container";;
			"install-skeleton") r=$r"Sets up a base Cherrycake installation";;
			"setup-config") r=$r"Creates the Cherrycake config files";;
			"composer-update") r=$r"Updates Cherrycake's composer dependencies";;
			"install-base-database") r=$r"Installs an initial Cherrycake database on the MariaDB container";;
			"setup-nginx") r=$r"Sets up Nginx to work with Cherrycake";;
			"engine-developer-mode") r=$r"Sets this installation in engine developer mode";;
			"app-developer-mode") r=$r"Sets this installation in app developer mode";;
			"generate-janitor-key") r=$r"Generates a random Janitor key";;
			"cli") r=$r"Executes a Cherrycake cli action. Pass the action name as value";;
			"janitor") r=$r"Runs the janitor";;
			"redis-flush-all") r=$r"Flushes the entire Redis cache (Uncomitted queues will be lost)";;
		esac
		r=$r'\n'
	done
	echo -e $r | column -t -s "#"
}

function error {
	echo -e $COLOR_ERROR$1$COLOR_RESET'\n'
}

function warning {
	echo -e $COLOR_WARNING$1$COLOR_RESET'\n'
}

function info {
	echo -e $COLOR_INFO$1$COLOR_RESET'\n'
}

function getJanitorKey {
	JANITOR_KEY_FILE=$VARIABLES_DIR'/janitorKey'
	if [ ! -f $JANITOR_KEY_FILE ]; then
		echo "Janitor key not created. Use the 'generate-janitor-key' command"
		exit 1
	fi
	JANITOR_KEY=`cat $JANITOR_KEY_FILE`
}

header

# Check if we haven't received any command
if [ $# -eq 0 ]; then
	syntax
	listCommands
	exit 1
fi

# Check commands and run them
case "$1" in
	"help")
		syntax
		listCommands
		;;
	"start")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml up -d
		docker exec -it -u root $DOCKER_PHP /scripts/install-skeleton
		scripts/generate-janitor-key
		docker exec -it -u root $DOCKER_NGINX /scripts/setup-config
		docker exec -it -u root $DOCKER_NGINX /scripts/setup-nginx
		docker exec -it -u root $DOCKER_NGINX /scripts/install-base-database
		;;
	"stop")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml stop
		;;
	"down")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml down
		;;
	"restart")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml stop
		docker-compose -p $APP_NAME --file docker/docker-compose.yml up -d
		;;
	"status")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml ps
		;;
	"nginx-build")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml build nginx
		;;
	"nginx-log")
		docker logs -f --details $DOCKER_NGINX
		;;
	"nginx-ssh")
		docker exec -it -u root $DOCKER_NGINX bash
		;;
	"nginx-restart")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml restart nginx
		;;
	"php-build")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml build php
		;;
	"php-log")
		docker logs -f --details $DOCKER_PHP
		;;
	"php-ssh")
		docker exec -it -u root $DOCKER_PHP bash
		;;
	"php-restart")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml restart php
		;;
	"cron-ssh")
		docker exec -it -u root $DOCKER_CRON bash
		;;
	"cron-restart")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml restart cron
		;;
	"db-build")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml build mariadb
		;;
	"db-log")
		docker logs -f --details $DOCKER_DB
		;;
	"db-ssh")
		docker exec -it -u root $DOCKER_DB bash
		;;
	"db-restart")
		docker-compose -p $APP_NAME --file docker/docker-compose.yml restart mariadb
		;;
	"set-app-name")
		scripts/set-app-name $2
		;;
	"install-skeleton")
		docker exec -it -u root $DOCKER_PHP /scripts/install-skeleton
		scripts/generate-janitor-key
		docker exec -it -u root $DOCKER_NGINX /scripts/setup-config
		docker exec -it -u root $DOCKER_NGINX /scripts/setup-nginx
		docker exec -it -u root $DOCKER_NGINX /scripts/install-base-database
		;;
	"setup-config")
		docker exec -it -u root $DOCKER_NGINX /scripts/setup-config
		;;
	"composer-update")
		docker exec -it -u root $DOCKER_PHP /scripts/composer-update
		;;
	"install-base-database")
		docker exec -it -u root $DOCKER_NGINX /scripts/install-base-database
		;;
	"setup-nginx")
		docker exec -it -u root $DOCKER_NGINX /scripts/setup-nginx
		;;
	"engine-developer-mode")
		docker exec -it -u root $DOCKER_PHP /scripts/set-engine-developer-mode
		;;
	"app-developer-mode")
		docker exec -it -u root $DOCKER_PHP /scripts/set-app-developer-mode
		;;
	"generate-janitor-key")
		scripts/generate-janitor-key
		;;
	"cli")
		docker exec -it -u root $DOCKER_PHP /var/www/app/cherrycake $2
		;;
	"janitor")
		getJanitorKey
		docker exec -it -u root $DOCKER_PHP /var/www/app/cherrycake janitorRun --key=$JANITOR_KEY
		;;
	"redis-flush-all")
		docker exec -it -u root $DOCKER_REDIS redis-cli flushall
		;;
	*)
		error "Unknown command '$1'"
		syntax
		listCommands
		;;
esac